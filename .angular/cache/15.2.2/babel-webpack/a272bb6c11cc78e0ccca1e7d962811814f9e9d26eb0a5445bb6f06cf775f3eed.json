{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NumberInputDirective {\n  constructor(el) {\n    this.el = el;\n    this.maxValueReached = false;\n  }\n  Event(event) {\n    const value = event.key;\n    if (isNaN(value) || value < 1 || value >= 10 || this.maxValueReached) {\n      console.log(event);\n      event.preventDefault();\n    }\n  }\n  onInput(event) {\n    const value = parseInt(event.target.value, 10);\n    if (isNaN(value) || value < 1 || value > 999999) {\n      this.maxValueReached = true;\n    }\n  }\n}\nNumberInputDirective.ɵfac = function NumberInputDirective_Factory(t) {\n  return new (t || NumberInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nNumberInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: NumberInputDirective,\n  selectors: [[\"\", \"appNumberInput\", \"\"]],\n  hostBindings: function NumberInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keypress\", function NumberInputDirective_keypress_HostBindingHandler($event) {\n        return ctx.Event($event);\n      })(\"input\", function NumberInputDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      });\n    }\n  }\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,oBAAoB;EAE/BC,YAAoBC,EAAc;IAAd,OAAE,GAAFA,EAAE;IADtB,oBAAe,GAAG,KAAK;EACc;EACCC,KAAK,CAACC,KAAU;IACpD,MAAMC,KAAK,GAAGD,KAAK,CAACE,GAAG;IACvB,IAAIC,KAAK,CAACF,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,EAAE,IAAI,IAAI,CAACG,eAAe,EAAE;MACpEC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;MAClBA,KAAK,CAACO,cAAc,EAAE;;EAE1B;EACmCC,OAAO,CAACR,KAAU;IACnD,MAAMC,KAAK,GAAGQ,QAAQ,CAAET,KAAK,CAACU,MAA2B,CAACT,KAAK,EAAE,EAAE,CAAC;IACpE,IAAIE,KAAK,CAACF,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,MAAM,EAAE;MAC/C,IAAI,CAACG,eAAe,GAAG,IAAI;;EAE/B;;AAfWR,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAe;EAAAC;IAAA;;eAApBC,iBAAa;MAAA;QAAA,OAAbA,mBAAe;MAAA","names":["NumberInputDirective","constructor","el","Event","event","value","key","isNaN","maxValueReached","console","log","preventDefault","onInput","parseInt","target","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["E:\\Akshai\\hurray\\src\\app\\directives\\number-input.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appNumberInput]',\n})\nexport class NumberInputDirective {\n  maxValueReached = false;\n  constructor(private el: ElementRef) {}\n  @HostListener('keypress', ['$event']) Event(event: any) {\n    const value = event.key;\n    if (isNaN(value) || value < 1 || value >= 10 || this.maxValueReached) {\n      console.log(event);\n      event.preventDefault();\n    }\n  }\n  @HostListener('input', ['$event']) onInput(event: any) {\n    const value = parseInt((event.target as HTMLInputElement).value, 10);\n    if (isNaN(value) || value < 1 || value > 999999) {\n      this.maxValueReached = true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}